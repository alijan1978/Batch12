
3/28/2022 Inheritance in Java --> Review
===============================================================

Inheritance is a mechanism in Java through which one class can acquire the properties and methods from another class.
The class from which we acquire the properties is called parent/superclass/baseclass and the class which acquire the
properties and method is called Child class/derived class/subclass.

Advantages:
1. Code duplication is reduced
2. Saves memory
3. Execution time is less

Disadvantages:
 Classes get tightly coupled. If we change some in the parent class, it will affect all the children classes,
  and we have to make sure that this new change is compatible with the code that we have in the children classes.

 When we should use Inheritance:
 If there is a case in which we would have to use the same methods in many classes and the classes are closely related
 to each other, the best practice would be into the subclasses.
  For example: Cat class -- > Dog class

  Types of Inheritance:
  We have 4 types of Inheritance, they are:
  1. Single
  2. Hierarical
  3. Multilevel
  4. Multiple
*****************************************************
  Single Inheritance:
  In Single inheritance we have only one parent and only one child class.
  Class Animal{
  Stine name;
  String color;
  int age;
  double weight;
  }
  ***************************************************
  Hierarchical inheritance:
  In Hierarchical we have only one parent and many children classes.
  Class Animal{
  Stine name;
  String color;
  int age;
  double weight;
  }
  class Dog extends Animal{
  }
  class Cat extend Animal{
  }
  ************************************************
  Multilevel inheritance:
      If we have one parent and one child class and many intermediate classes it is called multilevel inheritance.
      CEO-->Manager-->Assisst Manager--> Senior Employee-->Junior Employee
      class Human{
      String name;
  }
  class Employee extends Human{
  String employeeId;
  }
  class Teacher extends Employee{
  String subjects
  }
****************************************************
    4. Multiple Inheritance:
    We have a single child class and multiple parent class: This is not supported in java with classes, but
    possible with the help of Interfaces. Example:

    Class Display{
    Int resolution;
    }
    Class Keyboard{
    int noOfKeys
    }
    Class laptop extends Display, Keyboard{
    }
    **********************************************

    Rules:
    1. Private members are not inherited (private fields and private methods)
    2. Constructors don't participate in inheritance.
    3. If we have constructor in the parent class, we must have a matching constructor in the children classes as well.
    4. In Java, a subclass can only extend single parent class.
------------------------------------------------------------------------------------
====================================================================================

Super Keyword:

Super keyword is a reference variable that we can use to access the fields (variable) or Methods, or constructors
of the parent class. in case we have the same elements in the child class.

super. to call methods
super() to refer variables

Usage:
1. If we have the same name fields in the parent class and in the child class, we can use super keyword to refer to the
    parent class field as by default Java prefers the instance field of the child class.
2. We can use the super keyword to call the method of the parent class, if we have same named method in the child class as well.
3. We can use super( ) , to call/access the parent class constructor.

Overloading in Java:

When we have the same method's name exist in a class with different parameters or different type of parameters or different
sequence of parameters.

Advantages of Overloading:
1. More readable code
2. Code is easier to use
3. Flexible code
4. We can have Polymorphism with the help of method overloading.

When we should Overload a Method:

If methods are performing same operations, but with different parameters then we should overload these methods.

Rules:
1. method name should be same
2. Method signature should be different // method signature (method's name + parameter list)
3. We cannot overload a method by just changing its return type
4. We cannot overload a method by just changing its access modifiers (public, private, protected, default)
5. We cannot overload a method by just changing its non-access modifiers (static, final, etc)
***************important question******************
6. We can overload static methods and main method as well.
7. we can overload constructors.




































